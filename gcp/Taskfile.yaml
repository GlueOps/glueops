# https://taskfile.dev
version: '3'

includes:
  shared: ../shared


vars:
  GREETING: Hello, World!
env:
  TF_VAR_GCP_ORGANIZATION_ID: 
    sh: gcloud organizations list --format=json | jq -r '.[0].name | split("/") | .[1]' ##gcloud auth: https://stackoverflow.com/questions/53306131/difference-between-gcloud-auth-application-default-login-and-gcloud-auth-logi
  TF_VAR_COMPANY_KEY: 
    sh: echo -n $COMPANY_KEY
  TF_VAR_UNIQUE_IDENTIFIER: 
    sh: echo -n $UNIQUE_IDENTIFIER
  CAPTAIN_CLUSTER_NAME: 
    sh: echo -n $CAPTAIN_CLUSTER_NAME
  SVC_LB_PATCH:
    sh: echo -n '{"spec"'':' '{"type"'':'  '"LoadBalancer"}}'
  VAULT_GOOGLE_CREDENTIALS:
    sh: "[ -f ./gcp-service-account-keys/hashicorp-vault.jb64 ] && cat ./gcp-service-account-keys/hashicorp-vault.jb64 || echo -n 'This needs to be fixed before you bootstrap the clusters Missing file... ./gcp-service-account-keys/hashicorp-vault.jb64'"
  TFC_GOOGLE_CREDENTIALS:
    sh: "[ -f ./gcp-service-account-keys/terraform-cloud-operator.jb64 ] && cat ./gcp-service-account-keys/terraform-cloud-operator.jb64 || echo -n 'This needs to be fixed before you bootstrap the clusters Missing file... ./gcp-service-account-keys/terraform-cloud-operator.jb64'"
  TFC_API_TOKEN:
    sh: "[ -f ./terraform-cloud-operator/team-api-token.b64 ] && cat ./terraform-cloud-operator/team-api-token.b64 || echo -n 'This needs to be fixed before you bootstrap the clusters Missing file... ./terraform-cloud-operator/team-api-token.b64'"
  GCP_KMS_ENABLED: true
  GCP_TFC_ENABLED: true
  GOOGLE_PROJECT:
    sh: echo -n "$COMPANY_KEY-captain-$CREATION_DATE"
  GCP_KMS_KEY_RING:
    sh: echo -n "captain-$CREATION_DATE"
  CAPTAIN_CLUSTER_NAME:
    sh: echo -n "$COMPANY_KEY-$CREATION_DATE-captain"
  TF_VAR_CAPTAIN_CLUSTER_NAME: "{{.CAPTAIN_CLUSTER_NAME}}"
  TF_VAR_VAULT_ADDR: "https://vault.{{.CAPTAIN_DOMAIN}}"
  ADMIRAL_CLUSTER_NAME:
    sh: echo -n "$COMPANY_KEY-$CREATION_DATE-captain"

tasks:
  default:
    desc: Shows a list of all tasks
    cmds:
      - task -a

  test:
    cmds:
      - echo {{.CAPTAIN_CLUSTER_NAME}}

  auth:
    desc: Authenticate with GCP and Terraform Cloud. This must be run before gke_up and/or gke_destroy
    cmds:
      - terraform login
      - gcloud auth application-default login --no-launch-browser
      - gcloud init --console-only


  configs:
    desc: Generate configs
    cmds:
      - envsubst < ../shared/application-definition-for-captain-cluster.yaml.tpl > ../shared/application-definition-for-captain-cluster.yaml
      - rm -rf ~/.kube/
      - gcloud container clusters get-credentials admiral-{{.TF_VAR_TEST_NUMBER}}-gke --zone us-central1-a --project {{.TF_VAR_COMPANY_KEY}}-admiral-{{.TF_VAR_TEST_NUMBER}}
      - kubectl config rename-context `kubectl config current-context` {{.ADMIRAL_CLUSTER_NAME}}
      - mv ~/.kube/config ~/.kube/admiral
      - gcloud container clusters get-credentials captain-{{.TF_VAR_TEST_NUMBER}}-gke --zone us-central1-a --project {{.TF_VAR_COMPANY_KEY}}-captain-{{.TF_VAR_TEST_NUMBER}}
      - kubectl config rename-context `kubectl config current-context` {{.CAPTAIN_CLUSTER_NAME}}
      - mv ~/.kube/config ~/.kube/captain
      - KUBECONFIG={{.HOME}}/.kube/admiral:{{.HOME}}/.kube/captain kubectl config view --flatten > /tmp/config && mv /tmp/config ~/.kube/config
      - rm ~/.kube/admiral ~/.kube/captain
      - kubectl config use-context {{.ADMIRAL_CLUSTER_NAME}}

  gke_up:
    desc: Brings up GKE Cluster
    cmds:
      - date >> run.txt
      - terraform init
      - terraform apply --auto-approve -target=module.organization_and_project_bootstrap
      - terraform apply --auto-approve -target=module.vpc 
      - terraform apply --auto-approve -target=module.gke
      - terraform apply --auto-approve
      - terraform apply
      - date >> run.txt

  clean:
    desc: Shutdown GCP Projects that contain the GKE clusters.
    vars:
      FOLDER_ID:
        sh: gcloud resource-manager folders list --organization=`gcloud organizations list --format=json | jq -r '.[0].name | split("/") | .[1]'` --filter="{{.TF_VAR_COMPANY_KEY}} Core" --format=json | jq -r '.[0].name | split("/") | .[1]' || true
    cmds:
      - terraform destroy --auto-approve -target=module.tfc || true
      - gcloud projects delete {{.CAPTAIN_CLUSTER_NAME}} --quiet || true
      - gcloud projects delete {{.TF_VAR_COMPANY_KEY}}-admiral-{{.TF_VAR_TEST_NUMBER}} --quiet || true
      - gcloud alpha billing projects unlink {{.CAPTAIN_CLUSTER_NAME}} || true
      - gcloud alpha billing projects unlink {{.TF_VAR_COMPANY_KEY}}-admiral-{{.TF_VAR_TEST_NUMBER}} || true
      - gcloud resource-manager folders update {{.FOLDER_ID}} --display-name=`date +%s`"-DELETED" || true
      - task shared:cleanup

  gke_bootstrap_argocd:
    desc: install argocd on admiral cluster
    cmds:
      - task admiral
      - kubectl create namespace argocd || true
      - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.4.11/manifests/install.yaml
      - kubectl wait pods --all -n argocd --for condition=Ready --timeout=120s
      - kubectl patch svc argocd-server -n argocd -p {{shellQuote .SVC_LB_PATCH}}
      - until argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath="{.status.loadBalancer.ingress[0].ip}") --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --grpc-web --insecure; do echo "" ; done
      - argocd cluster add {{.CAPTAIN_CLUSTER_NAME}} --grpc-web --yes
      - kubectl apply -f ../shared/admiral-argocd-health-check.yaml -n argocd

  get_argocd_logins:
    desc: get logins for argocd
    cmds:
      - rm -rf credentials.txt
      - task admiral
      - echo 'Admiral Server:' 'https://'$(kubectl get service argocd-server -n argocd --output=jsonpath="{.status.loadBalancer.ingress[0].ip}") >> credentials.txt && echo 'User:' 'admin' >> credentials.txt  && echo 'Password:' $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> credentials.txt
      - task captain
      - echo 'Captain Server:' 'https://'$(kubectl get ing -n glueops-core -o=jsonpath="{$.items[0].spec.rules[0].host}") >> credentials.txt && echo 'User:' 'admin' >> credentials.txt  && echo 'Password:' $(kubectl -n glueops-core get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> credentials.txt

  gke_bootstrap_captain_cluster:
    desc: Using the ADMIRAL, install an argo app to bootstrap the captain cluster
    cmds:
      - task admiral
      - kubectl apply -f ../shared/application-definition-for-captain-cluster.yaml -n argocd

  admiral:
    desc: Using the ADMIRAL context
    cmds:
      - kubectl config use-context {{.ADMIRAL_CLUSTER_NAME}}

  captain:
    desc: Using the CAPTAIN context
    cmds:
      - kubectl config use-context {{.CAPTAIN_CLUSTER_NAME}}

  

      
