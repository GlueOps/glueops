version: '3'

tasks:
  send_credentials_to_slack:
    desc: Send ephemeral credentials to slack
    cmds:
      - curl -X POST --data-urlencode "payload={'channel'":" '#github-actions-tests', 'username'":" 'webhookbot', 'text'":" '`cat credentials.txt`', 'icon_emoji'":" ':github:'}" {{.SLACK_WEBHOOK_URL}}


  cleanup:
    desc: Shared items that can be cleaned up
    cmds:
      - terraform destroy --auto-approve -target=module.tfc || true
      - rm -rf *terraform*
      - rm -rf .terraform*
      - rm -rf ~/.kube/
      - rm -rf credentials.txt
      - rm -rf ~/.aws/


  admiral:
    desc: Using the ADMIRAL context
    cmds:
      - kubectl config use-context {{.ADMIRAL_CLUSTER_NAME}}

  captain:
    desc: Using the CAPTAIN context
    cmds:
      - kubectl config use-context {{.CAPTAIN_CLUSTER_NAME}}

  bootstrap_captain:
    desc: Using the ADMIRAL, install an argo app to bootstrap the captain cluster
    cmds:
      - task shared:admiral
      - kubectl apply -f ../shared/application-definition-for-captain-cluster.yaml -n argocd

  terraform_login:
    desc: Authenticate with Terraform Cloud. Note":" This does NOT auth with AWS. AWS is done with environment variables
    cmds:
      - terraform login

  argocd_logins:
    desc: get logins for argocd
    cmds:
      - rm -rf credentials.txt
      - task shared:admiral
      - echo 'AWS-Admiral Server:' 'https://'$(kubectl get service argocd-server -n argocd --output=jsonpath="{.status.loadBalancer.ingress[0].hostname}") >> credentials.txt && echo 'User:' 'admin' >> credentials.txt  && echo 'Password:' $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> credentials.txt
      - echo 'GCP-Admiral Server:' 'https://'$(kubectl get service argocd-server -n argocd --output=jsonpath="{.status.loadBalancer.ingress[0].ip}") >> credentials.txt && echo 'User:' 'admin' >> credentials.txt  && echo 'Password:' $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> credentials.txt
      - task shared:captain
      - echo 'Captain Server:' 'https://'$(kubectl get ing -n glueops-core -o=jsonpath="{$.items[0].spec.rules[0].host}") >> credentials.txt && echo 'User:' 'admin' >> credentials.txt  && echo 'Password:' $(kubectl -n glueops-core get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> credentials.txt

  deploy_argocd:
    cmds:
      - task shared:admiral
      - kubectl create namespace argocd || true
      - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.4.11/manifests/install.yaml
      - kubectl wait pods --all -n argocd --for condition=Ready --timeout=120s
      - kubectl patch svc argocd-server -n argocd -p {{shellQuote .SVC_LB_PATCH}}
      
  post_argocd_deploy:
    cmds:
      - argocd cluster add {{.CAPTAIN_CLUSTER_NAME}} --grpc-web --yes
      - kubectl apply -f ../shared/admiral-argocd-health-check.yaml -n argocd

  captain_kubeconfig_and_flatten_all_kubeconfigs:
    cmds:
      - kubectl config rename-context `kubectl config current-context` {{.CAPTAIN_CLUSTER_NAME}}
      - mv ~/.kube/config ~/.kube/captain
      # Create combined kubeconfig
      - KUBECONFIG={{.HOME}}/.kube/admiral:{{.HOME}}/.kube/captain kubectl config view --flatten > /tmp/config && mv /tmp/config ~/.kube/config
      - rm ~/.kube/admiral ~/.kube/captain

  admiral_kubeconfig_rename:
    cmds:
      - kubectl config rename-context `kubectl config current-context` {{.ADMIRAL_CLUSTER_NAME}}
      - mv ~/.kube/config ~/.kube/admiral

  generate_app_configs:
    cmds:
      - envsubst < ../shared/application-definition-for-captain-cluster.yaml.tpl > ../shared/application-definition-for-captain-cluster.yaml
      - rm -rf ~/.kube/