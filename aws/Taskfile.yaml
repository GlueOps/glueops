# https://taskfile.dev
# Taskfile for automating AWS EKS, ArgoCD deployment and destruction

version: '3'

vars:
  GREETING: "Time to deploy some EKS Clusters the GlueOps way!"
env:
  TF_VAR_COMPANY_KEY: 
    sh: echo -n $COMPANY_KEY
  AWS_ACCESS_KEY_ID:
    sh: echo -n $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY:
    sh: echo -n $AWS_SECRET_ACCESS_KEY
  AWS_REGION:
    sh: echo -n $AWS_REGION
  ROOT_ACCOUNT_ID:
    sh: echo -n $(aws sts get-caller-identity | jq '.Account' | tr -d '"')
  ADMIRAL_ACCOUNT_ID:
    sh: echo -n $(aws organizations list-accounts | jq '.Accounts | .[] | select(.Name | contains("{{.TF_VAR_COMPANY_KEY}}-admiral")) | .Id' | tr -d '"')
  CAPTAIN_ACCOUNT_ID:
    sh: echo -n $(aws organizations list-accounts | jq '.Accounts | .[] | select(.Name | contains("{{.TF_VAR_COMPANY_KEY}}-captain")) | .Id' | tr -d '"')
  SVC_LB_PATCH:
    sh: echo -n '{"spec"'':' '{"type"'':'  '"LoadBalancer"}}'
  TFC_API_TOKEN:
    sh: "[ -f ./terraform-cloud-operator/team-api-token.b64 ] && cat ./terraform-cloud-operator/team-api-token.b64 || echo -n 'This needs to be fixed before you bootstrap the clusters Missing file... ./terraform-cloud-operator/team-api-token.b64'"
  CAPTAIN_CLUSTER_NAME:
    sh: echo -n "captain-$COMPANY_KEY-$UNIQUE_IDENTIFIER"
  ADMIRAL_CLUSTER_NAME:
    sh: echo -n "{{.TF_VAR_COMPANY_KEY}}-admiral"
  TF_VAR_CAPTAIN_CLUSTER_NAME: "{{.CAPTAIN_CLUSTER_NAME}}"
  TF_VAR_VAULT_ADDR: "https://vault.{{.CAPTAIN_DOMAIN}}"
  SLACK_WEBHOOK_URL:
    sh: echo -n "$SLACK_WEBHOOK_URL"
  


tasks:
  default:
    desc: Shows a list of all tasks
    cmds:
      - task -a

  test:
    cmds:
      - echo {{.GREETING}}
  
  configs:
    desc: Generate configs
    env:
      VAULT_AWS_ACCESS_KEY_ID:
        sh: jq -rj '.aws_access_key_id' ./aws-iam-credentials/hashicorp-vault.json | base64
      VAULT_AWS_SECRET_ACCESS_KEY:
        sh: jq -rj '.aws_secret_access_key' ./aws-iam-credentials/hashicorp-vault.json | base64
      AWS_KMS_ENABLED: true
      TFC_AWS_ACCESS_KEY_ID:
        sh: jq -rj '.aws_access_key_id' ./aws-iam-credentials/terraform-cloud-operator.json | base64
      TFC_AWS_SECRET_ACCESS_KEY:
        sh: jq -rj '.aws_secret_access_key' ./aws-iam-credentials/terraform-cloud-operator.json | base64
      AWS_TFC_ENABLED: true
      AWS_REGION_BASE64:
        sh: echo -n $AWS_REGION | base64
      AWS_KMS_ENDPOINT:
        sh: echo -n "https://kms.$AWS_REGION.amazonaws.com" | base64
    cmds:
      # Create argocd app config
      - envsubst < ../shared/application-definition-for-captain-cluster.yaml.tpl > ../shared/application-definition-for-captain-cluster.yaml
      - rm -rf ~/.aws/ && mkdir ~/.aws
      - envsubst < ./aws_profile_config.tpl > ~/.aws/config
      
      # Set Admiral Cluster kubeconfig
      - rm -rf ~/.kube/
      - aws eks update-kubeconfig --region us-west-2 --name test-nonprod-test-stage-test-name-cluster --profile admiral --role-arn arn:aws:iam::{{.ADMIRAL_ACCOUNT_ID}}:role/OrganizationAccountAccessRole
      - kubectl config rename-context `kubectl config current-context` {{.ADMIRAL_CLUSTER_NAME}}
      - mv ~/.kube/config ~/.kube/admiral

      # Set Captain Cluster kubeconfig
      - aws eks update-kubeconfig --region us-west-2 --name test-nonprod-test-stage-test-name-cluster --profile captain --role-arn arn:aws:iam::{{.CAPTAIN_ACCOUNT_ID}}:role/OrganizationAccountAccessRole
      - kubectl config rename-context `kubectl config current-context` {{.CAPTAIN_CLUSTER_NAME}}
      - mv ~/.kube/config ~/.kube/captain

      # Create combined kubeconfig
      - KUBECONFIG={{.HOME}}/.kube/admiral:{{.HOME}}/.kube/captain kubectl config view --flatten > /tmp/config && mv /tmp/config ~/.kube/config
      - rm ~/.kube/admiral ~/.kube/captain

  auth:
    desc: Authenticate with Terraform Cloud. Note":" This does NOT auth with AWS. AWS is done with environment variables
    cmds:
      - terraform login

  eks_up:
    desc: Deploy Admiral and Captain AWS EKS clusters
    cmds:
      - date >> run.txt
      - terraform init
      - terraform apply --auto-approve
      - terraform apply
      - date >> run.txt

  eks_bootstrap_argocd:
    desc: install argocd on admiral cluster
    cmds:
      
      # Deploy ArgoCD 
      - task admiral
      - kubectl create namespace argocd || true
      - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.4.11/manifests/install.yaml
      - kubectl wait pods --all -n argocd --for condition=Ready --timeout=120s
      - kubectl patch svc argocd-server -n argocd -p {{shellQuote .SVC_LB_PATCH}}
      
      # Log in to ArgoCD on Admiral Cluster
      - until argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath="{.status.loadBalancer.ingress[0].hostname}") --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --grpc-web --insecure; do echo "" ; done
      
      # Add Captain cluster to Admiral Cluster (from login above) from captain cluster context
      - argocd cluster add {{.CAPTAIN_CLUSTER_NAME}} --grpc-web --yes
      - kubectl apply -f ../shared/admiral-argocd-health-check.yaml -n argocd

  eks_bootstrap_captain_cluster:
    desc: Using the ADMIRAL, install an argo app to bootstrap the captain cluster
    cmds:
      - task admiral
      - kubectl apply -f ../shared/application-definition-for-captain-cluster.yaml -n argocd

  get_argocd_logins:
    desc: get logins for argocd
    cmds:
      - rm -rf credentials.txt
      - task admiral
      - echo 'Admiral Server:' 'https://'$(kubectl get service argocd-server -n argocd --output=jsonpath="{.status.loadBalancer.ingress[0].hostname}") >> credentials.txt && echo 'User:' 'admin' >> credentials.txt  && echo 'Password:' $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> credentials.txt
      - task captain
      - echo 'Captain Server:' 'https://'$(kubectl get ing -n glueops-core -o=jsonpath="{$.items[0].spec.rules[0].host}") >> credentials.txt && echo 'User:' 'admin' >> credentials.txt  && echo 'Password:' $(kubectl -n glueops-core get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> credentials.txt

  clean:
    desc: Nuke all AWS resources and delete temporary configuration files
    cmds:
      - terraform destroy --auto-approve -target=module.tfc || true
      - wget https://github.com/rebuy-de/aws-nuke/releases/download/v2.20.0/aws-nuke-v2.20.0-linux-amd64.tar.gz && tar -xvf aws-nuke-v2.20.0-linux-amd64.tar.gz && rm aws-nuke-v2.20.0-linux-amd64.tar.gz && mv aws-nuke-v2.20.0-linux-amd64 aws-nuke
      - task nuke_captain
      - task nuke_admiral
      - rm aws-nuke-*.yaml
      - rm -rf *terraform*
      - rm -rf .terraform*
      - rm -rf ~/.kube/
      - rm -rf credentials.txt
      - rm -rf ~/.aws/
  
  nuke_captain:
    desc: Nuke all AWS resources in Captain Account.
    env:
      TARGET_ACCOUNT_ID:
        sh: echo -n {{.CAPTAIN_ACCOUNT_ID}}
    vars:
      NUKE_CONFIG:
        sh: echo -n aws-nuke-captain-{{.CAPTAIN_ACCOUNT_ID}}.yaml
    cmds:
      - envsubst < ./aws-nuke.yaml.tpl > ./{{.NUKE_CONFIG}}
      - timeout 300s ./aws-nuke -c ./{{.NUKE_CONFIG}} --assume-role-arn arn:aws:iam::{{.CAPTAIN_ACCOUNT_ID}}:role/OrganizationAccountAccessRole --no-dry-run --force --force-sleep=3 || true
      - ./aws-nuke -c ./{{.NUKE_CONFIG}} --assume-role-arn arn:aws:iam::{{.CAPTAIN_ACCOUNT_ID}}:role/OrganizationAccountAccessRole --no-dry-run --force  --force-sleep=3 || true

  nuke_admiral:
    desc: Nuke all AWS resources in Admiral Account.
    env:
      TARGET_ACCOUNT_ID:
        sh: echo -n {{.ADMIRAL_ACCOUNT_ID}}
    vars:
      NUKE_CONFIG:
        sh: echo -n aws-nuke-admiral-{{.ADMIRAL_ACCOUNT_ID}}.yaml
    cmds:
      - envsubst < ./aws-nuke.yaml.tpl > ./{{.NUKE_CONFIG}}
      - timeout 300s ./aws-nuke -c ./{{.NUKE_CONFIG}} --assume-role-arn arn:aws:iam::{{.ADMIRAL_ACCOUNT_ID}}:role/OrganizationAccountAccessRole --no-dry-run --force --force-sleep=3  || true
      - ./aws-nuke -c ./{{.NUKE_CONFIG}} --assume-role-arn arn:aws:iam::{{.ADMIRAL_ACCOUNT_ID}}:role/OrganizationAccountAccessRole --no-dry-run --force --force-sleep=3 || true


  admiral:
    desc: Using the ADMIRAL context
    cmds:
      - kubectl config use-context {{.ADMIRAL_CLUSTER_NAME}}

  captain:
    desc: Using the CAPTAIN context
    cmds:
      - kubectl config use-context {{.CAPTAIN_CLUSTER_NAME}}

  send_credentials_to_slack:
    desc: Send ephemeral credentials to slack
    cmds:
      - curl -X POST --data-urlencode "payload={'channel'":" '#github-actions-tests', 'username'":" 'webhookbot', 'text'":" '`cat credentials.txt`', 'icon_emoji'":" ':github:'}" {{.SLACK_WEBHOOK_URL}}
