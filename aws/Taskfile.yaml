# https://taskfile.dev
# Taskfile for automating AWS EKS, ArgoCD deployment and destruction

version: '3'

includes:
  shared: ../shared


env:
  TF_VAR_COMPANY_KEY: 
    sh: echo -n $COMPANY_KEY
  AWS_ACCESS_KEY_ID:
    sh: echo -n $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY:
    sh: echo -n $AWS_SECRET_ACCESS_KEY
  AWS_REGION:
    sh: echo -n $AWS_REGION
  ROOT_ACCOUNT_ID:
    sh: echo -n $(aws sts get-caller-identity | jq '.Account' | tr -d '"')
  ADMIRAL_ACCOUNT_ID:
    sh: echo -n $(aws organizations list-accounts | jq '.Accounts | .[] | select(.Name | contains("{{.TF_VAR_COMPANY_KEY}}-admiral")) | .Id' | tr -d '"')
  CAPTAIN_ACCOUNT_ID:
    sh: echo -n $(aws organizations list-accounts | jq '.Accounts | .[] | select(.Name | contains("{{.TF_VAR_COMPANY_KEY}}-captain")) | .Id' | tr -d '"')
  SVC_LB_PATCH:
    sh: echo -n '{"spec"'':' '{"type"'':'  '"LoadBalancer"}}'
  TFC_API_TOKEN:
    sh: "[ -f ./terraform-cloud-operator/team-api-token.b64 ] && cat ./terraform-cloud-operator/team-api-token.b64 || echo -n 'This needs to be fixed before you bootstrap the clusters Missing file... ./terraform-cloud-operator/team-api-token.b64'"
  CAPTAIN_CLUSTER_NAME:
    sh: echo -n "captain-$COMPANY_KEY-$UNIQUE_IDENTIFIER"
  ADMIRAL_CLUSTER_NAME:
    sh: echo -n "{{.TF_VAR_COMPANY_KEY}}-admiral"
  TF_VAR_CAPTAIN_CLUSTER_NAME: "{{.CAPTAIN_CLUSTER_NAME}}"
  TF_VAR_VAULT_ADDR: "https://vault.{{.CAPTAIN_DOMAIN}}"
  SLACK_WEBHOOK_URL:
    sh: echo -n "$SLACK_WEBHOOK_URL"
  


tasks:
  configs:
    desc: Generate configs
    env:
      VAULT_AWS_ACCESS_KEY_ID:
        sh: jq -rj '.aws_access_key_id' ./aws-iam-credentials/hashicorp-vault.json | base64
      VAULT_AWS_SECRET_ACCESS_KEY:
        sh: jq -rj '.aws_secret_access_key' ./aws-iam-credentials/hashicorp-vault.json | base64
      AWS_KMS_ENABLED: true
      TFC_AWS_ACCESS_KEY_ID:
        sh: jq -rj '.aws_access_key_id' ./aws-iam-credentials/terraform-cloud-operator.json | base64
      TFC_AWS_SECRET_ACCESS_KEY:
        sh: jq -rj '.aws_secret_access_key' ./aws-iam-credentials/terraform-cloud-operator.json | base64
      AWS_TFC_ENABLED: true
      AWS_REGION_BASE64:
        sh: echo -n $AWS_REGION | base64
      AWS_KMS_ENDPOINT:
        sh: echo -n "https://kms.$AWS_REGION.amazonaws.com" | base64
    cmds:
      # Create argocd app config
      - task shared:generate_app_configs
      - rm -rf ~/.aws/ && mkdir ~/.aws
      - envsubst < ./aws_profile_config.tpl > ~/.aws/config
      
      # Set Admiral Cluster kubeconfig
      - aws eks update-kubeconfig --region us-west-2 --name test-nonprod-test-stage-test-name-cluster --profile admiral --role-arn arn:aws:iam::{{.ADMIRAL_ACCOUNT_ID}}:role/OrganizationAccountAccessRole
      - task shared:admiral_kubeconfig_rename

      # Set Captain Cluster kubeconfig
      - aws eks update-kubeconfig --region us-west-2 --name test-nonprod-test-stage-test-name-cluster --profile captain --role-arn arn:aws:iam::{{.CAPTAIN_ACCOUNT_ID}}:role/OrganizationAccountAccessRole
      - task shared:captain_kubeconfig_and_flatten_all_kubeconfigs

  auth:
    desc: Authenticate with Terraform Cloud. Note":" This does NOT auth with AWS. AWS is done with environment variables
    cmds:
      - task shared:terraform_login

  eks_up:
    desc: Deploy Admiral and Captain AWS EKS clusters
    cmds:
      - terraform init
      - terraform apply --auto-approve
      - terraform apply

  bootstrap_admiral:
    desc: install argocd on admiral cluster
    cmds:
      # Deploy ArgoCD 
      - task shared:deploy_argocd
      # Log in to ArgoCD on Admiral Cluster
      - until argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath="{.status.loadBalancer.ingress[0].hostname}") --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --grpc-web --insecure; do echo "" ; done
      # Add Captain cluster to Admiral Cluster (from login above) from captain cluster context
      - task shared:post_argocd_deploy

  clean:
    desc: Nuke all AWS resources and delete temporary configuration files
    cmds:
      - wget https://github.com/rebuy-de/aws-nuke/releases/download/v2.20.0/aws-nuke-v2.20.0-linux-amd64.tar.gz && tar -xvf aws-nuke-v2.20.0-linux-amd64.tar.gz && rm aws-nuke-v2.20.0-linux-amd64.tar.gz && mv aws-nuke-v2.20.0-linux-amd64 aws-nuke
      - task nuke_captain
      - task nuke_admiral
      - rm aws-nuke-*.yaml
      - task shared:cleanup
  
  nuke_captain:
    desc: Nuke all AWS resources in Captain Account.
    env:
      TARGET_ACCOUNT_ID:
        sh: echo -n {{.CAPTAIN_ACCOUNT_ID}}
    vars:
      NUKE_CONFIG:
        sh: echo -n aws-nuke-captain-{{.CAPTAIN_ACCOUNT_ID}}.yaml
    cmds:
      - envsubst < ./aws-nuke.yaml.tpl > ./{{.NUKE_CONFIG}}
      - timeout 300s ./aws-nuke -c ./{{.NUKE_CONFIG}} --assume-role-arn arn:aws:iam::{{.CAPTAIN_ACCOUNT_ID}}:role/OrganizationAccountAccessRole --no-dry-run --force --force-sleep=3 || true
      - ./aws-nuke -c ./{{.NUKE_CONFIG}} --assume-role-arn arn:aws:iam::{{.CAPTAIN_ACCOUNT_ID}}:role/OrganizationAccountAccessRole --no-dry-run --force  --force-sleep=3 || true

  nuke_admiral:
    desc: Nuke all AWS resources in Admiral Account.
    env:
      TARGET_ACCOUNT_ID:
        sh: echo -n {{.ADMIRAL_ACCOUNT_ID}}
    vars:
      NUKE_CONFIG:
        sh: echo -n aws-nuke-admiral-{{.ADMIRAL_ACCOUNT_ID}}.yaml
    cmds:
      - envsubst < ./aws-nuke.yaml.tpl > ./{{.NUKE_CONFIG}}
      - timeout 300s ./aws-nuke -c ./{{.NUKE_CONFIG}} --assume-role-arn arn:aws:iam::{{.ADMIRAL_ACCOUNT_ID}}:role/OrganizationAccountAccessRole --no-dry-run --force --force-sleep=3  || true
      - ./aws-nuke -c ./{{.NUKE_CONFIG}} --assume-role-arn arn:aws:iam::{{.ADMIRAL_ACCOUNT_ID}}:role/OrganizationAccountAccessRole --no-dry-run --force --force-sleep=3 || true

